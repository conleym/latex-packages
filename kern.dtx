% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
kern --- Some useful kerning macros
Author:  Mike Conley
E-mail:  conasdf@gmail.com
License: Released under the LaTeX Project Public License v1.3c or later
See:     http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
kern --- Some useful kerning macros
Author:  Mike Conley
E-mail:  conasdf@gmail.com
License: Released under the LaTeX Project Public License v1.3c or later
See:     http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2015 by Mike Conley <conasdf@gmail.com>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Mike Conley.

This work consists of the file kern.dtx and a Makefile.
Running "make" generates the derived files README, kern.pdf and kern.sty.
Running "make inst" installs the files in the user's TeX tree.
Running "make install" installs the files in the local TeX tree.

\endpostamble

\usedir{tex/latex/kern}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/kern}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/kern}
\generate{
  \file{README-\jobname.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{kern.dtx}
%</driver>
%<*package>
\NeedsTeXFormat{LaTeX2e}[1999/12/01]
\RequirePackage{package}
\Package{kern}[2015/07/18 v1.00 Some useful kerning macros]
%</package>
%<*driver>
\NormalWhitespace
\documentclass{ltxdoc}
\usepackage[a4paper,margin=25mm,left=50mm,nohead]{geometry}
\usepackage[numbered]{hypdoc}
\usepackage{\jobname}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%\title{\textsf{kern} --- Some useful kerning macros\thanks{This file
%   describes version \fileversion, last revised \filedate.}
%}
%\author{Mike Conley\thanks{E-mail: conasdf@gmail.com}}
%\date{Released \filedate}
%
%\maketitle
%
%\changes{v1.00}{2015/07/18}{First public release}
%
% \section{Usage}
%
% \DescribeMacro{\hkern}
%
% \DescribeMacro{\vkern}
%
% \DescribeMacro{\letkern}
%
%
% \section{Implementation}
%
%    \begin{macrocode}
%<*package>

%    \end{macrocode}
% \begin{macro}{\hkern}
%   This macro has a very simple implementation -- leave vertical
%   mode, then kern.  The only trick is to put the |\kern| inside
%   an |\hbox|, which prevents \TeX\ removing the kern at the
%   beginning of a line or paragraph.
%    \begin{macrocode}
\newcommand{\hkern}[1]{
  \leavevmode
  \hbox{\kern #1}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\vkern}
%   First, we need a |\par| token to force \TeX\ into vmode.
%   Now, we also need to remove any |\parskip| glue, so we do a
%   |\vskip|.  We need to check |\ifvmode| because
%   |\par| tokens are ignored in vertical mode.  So, if we're
%   already in vertical mode, the |\parskip| glue will not be
%   added, since we wouldn't be starting a new paragraph afterward!
%   Thus, our |vskip| would actually add more negative glue,
%   rather than cancelling out any |\parskip| glue.
%
%    \begin{macrocode}
\newcommand{\vkern}[1]{
  \ifvmode\else
    \par
    \vskip-\parskip
  \fi
  \kern #1
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\letkern}
%   This macro is also simple: just kern, do something, then kern
%   backwards by the same amount.
%    \begin{macrocode}
\newcommand{\letkern}[2]{
  \kern #1 #2 \kern -#1
}
%    \end{macrocode}
% \end{macro}
%
%
%    \begin{macrocode}
\EndPackage
%</package>
%    \end{macrocode}
%
% \CheckSum{19}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \endinput
% Local Variables:
% mode: doctex
% TeX-master: t
% End:
