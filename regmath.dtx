% \iffalse meta-comment
%<*internal>
\iffalse
%</internal>
%<*readme>
----------------------------------------------------------------
regmath --- Macros for TeX assembly programming
Author:  Mike Conley
E-mail:  conasdf@gmail.com
License: Released under the LaTeX Project Public License v1.3c or later
See:     http://www.latex-project.org/lppl.txt
----------------------------------------------------------------
%</readme>
%<*internal>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
  \expandafter\begingroup
\fi
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble
----------------------------------------------------------------
regmath --- Macros for TeX assembly programming
Author:  Mike Conley
E-mail:  conasdf@gmail.com
License: Released under the LaTeX Project Public License v1.3c or later
See:     http://www.latex-project.org/lppl.txt
----------------------------------------------------------------

\endpreamble
\postamble

Copyright (C) 2017 by Mike Conley <conasdf@gmail.com>

This work may be distributed and/or modified under the
conditions of the LaTeX Project Public License (LPPL), either
version 1.3c of this license or (at your option) any later
version.  The latest version of this license is in the file:

http://www.latex-project.org/lppl.txt

This work is "maintained" (as per LPPL maintenance status) by
Mike Conley.

This work consists of the file regmath.dtx and a Makefile.
Running "make" generates the derived files README, regmath.pdf and regmath.sty.
Running "make inst" installs the files in the user's TeX tree.
Running "make install" installs the files in the local TeX tree.

\endpostamble

\usedir{tex/latex/regmath}
\generate{
  \file{\jobname.sty}{\from{\jobname.dtx}{package}}
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/regmath}
\generate{
  \file{\jobname.ins}{\from{\jobname.dtx}{install}}
}
\nopreamble\nopostamble
\usedir{doc/latex/regmath}
\generate{
  \file{README-\jobname.txt}{\from{\jobname.dtx}{readme}}
}
\ifx\fmtname\nameofplainTeX
  \expandafter\endbatchfile
\else
  \expandafter\endgroup
\fi
%</internal>
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{regmath.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\NeedsPackage{package}
%<package>\Package{regmath}
%<*package>
    [2005/08/30 v1.00 Macros for TeX assembly programming]
%</package>
%<*driver>
\NormalWhitespace
\documentclass{ltxdoc}
\usepackage[a4paper,margin=25mm,left=50mm,nohead]{geometry}
\usepackage[numbered]{hypdoc}
\usepackage{gscript}
\usepackage{amsmath}
\usepackage{\jobname}
\begin{document}

\newcommand{\nr}{nr}
\newcommand{\nro}{\nr\subscript{1}}
\newcommand{\nrt}{\nr\subscript{2}}
\newcommand{\rp}{r}
\newcommand{\ro}{\rp\subscript{1}}
\newcommand{\rt}{\rp\subscript{2}}

\newcommand{\result}[1]{
  $\meta{\rp} \leftarrow \meta{\nro} #1 \meta{\nrt}$
}

  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
%
% \title{\textsf{regmath} --- Macros for \TeX\ Assembly Programming
%   \thanks{This file
%   describes version \fileversion, last revised \filedate.}
%}
%\author{Mike Conley\thanks{E-mail: conasdf@gmail.com}}
%\date{Released \filedate}
%
%\maketitle
%
%\changes{v1.00}{2005/08/30}{First public release}
%
% \begin{abstract}
% This package provides a set of type-independent three-address macros
% for performing arithmetic with \TeX's numeric registers.  The macros
% here are divided into two types: primitive and derived.
%
% Primitive macros are simple wrappers around the math operations
% directly supported by \TeX: $+, -, \times, $ and $\div$.  Derived
% operations are slightly more complicated, and include \textsf{mod} and
% boolean operations.
% \end{abstract}
%
% \section{Usage}
%
%
% In the descriptions below, \nro\ and \nrt\ may be numeric registers or
% constants. \rp, \ro\ and \rt\ must be registers.
%
% \DescribeMacro{\rld}
%
% |\rld|\marg{\nro}\marg{\rp}: $\meta{\rp} \leftarrow \meta{\nro}$
%
% Assign \nro\ to the register \rp.
%
%
% \subsection{Primitive Instructions}
%
% These are fairly self-explanatory.  Each macro takes three
% arguments.  The first and second are not modified and may be
% registers or constants.  The result is stored in the third, which
% must be a register.  In short, the syntax may be summarized as
% |\primitivemacro|\marg{\nro}\marg{\nrt}\marg{\rp}.
%
% \DescribeMacro{\radd}
%
% |\radd|\marg{\nro}\marg{\nrt}\marg{\rp}: \result{+}
%
% \DescribeMacro{\rsub}
%
% |\rsub|\marg{\nro}\marg{\nrt}\marg{\rp}: \result{-}
%
% \DescribeMacro{\rmul}
%
% |\rmul|\marg{\nro}\marg{\nrt}\marg{\rp}: \result{\times}
%
% \DescribeMacro{\rdiv}
%
% |\rdiv|\marg{\nro}\marg{\nrt}\marg{\rp}: \result{\div}
%
%
% \subsection{Derived Instructions}
%
% \DescribeMacro{\rmod}
%
% |\rmod|\marg{\ro}\marg{\nr}\marg{\rt}: $\meta{\rt} \leftarrow \meta{\nr} \bmod \meta{\ro}$
%
% The result of |\rmod| is always positive, e.g., the value of |\count1| will be
% 2 when the following code is executed:
% \begin{verbatim}
% \rld{5}{\count0}
% \rmod{\count0}{-3}{\count1}
% \end{verbatim}
%
% \DescribeMacro{\rmax}
%
% |\rmax|\marg{\nro}\marg{\nrt}\marg{\rp}: $\meta{\rp} \leftarrow \max(\meta{\nro}, \meta{\nrt})$
%
% \DescribeMacro{\rmin}
%
% |\rmin|\marg{\nro}\marg{\nrt}\marg{\rp}: $\meta{\rp} \leftarrow \min(\meta{\nro}, \meta{\nrt})$
%
% \subsubsection{Boolean Operations}
%
% For purposes of these operations, the number 0 is considered false,
% and all other values are considered true.
%
% \DescribeMacro{\rand}
%
% |\rand|\marg{\nro}\marg{\nr2}\marg{\rp}:
% $
%   \meta{\rp} \leftarrow
%   \begin{cases}
%     \meta{\nro}, & \text{if } \meta{\nro} = 0 \\
%     \meta{\nrt}, & \text{otherwise}
%   \end{cases}
% $
%
% \DescribeMacro{\ror}
%
% |\ror|\marg{\nro}\marg{\nr2}\marg{\rp}:
% $
%   \meta{\rp} \leftarrow
%   \begin{cases}
%     \meta{\nrt}, & \text{if } \meta{\nro} = 0 \\
%     \meta{\nro}, & \text{otherwise}
%   \end{cases}
% $
%
%
%
% \section{Implementation}
%
%    \begin{macrocode}
%<*package>

%    \end{macrocode}
%
%
% \begin{macro}{\rld}
%    \begin{macrocode}
\newcommand{\rld}[2]{
  #2 = #1
  \relax
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Primitive Instructions}
%
% Each primitive operation ends with a |\relax|, which prevents
% \TeX\ from looking beyond the macro expansion for more numbers to
% |\advance|, etc.~by.
%
%
% \begin{macro}{\radd}
%    \begin{macrocode}
\newcommand{\radd}[3]{
  #3 = #1
  \advance #3 by #2
  \relax
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rsub}
%    \begin{macrocode}
\newcommand{\rsub}[3]{
  #3 = #1
  \advance #3 by -#2
  \relax
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rmul}
%    \begin{macrocode}
\newcommand{\rmul}[3]{
  #3 = #1
  \multiply #3 by #2
  \relax
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rdiv}
%    \begin{macrocode}
\newcommand{\rdiv}[3]{
  #3 = #1
  \divide #3 by #2
  \relax
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Derived Instructions}
%
% \begin{macro}{\rmod}
%    \begin{macrocode}
\newcommand{\rmod}[3]{
  #3 = #1
  \divide #1 by #2
  \multiply #1 by #2
  \advance #3 by -#1
  \relax
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rand}
%   \begin{macrocode}
\newcommand{\rand}[3]{
  \ifthenelse{#1 = 0}
             {#3 = #1}
             {#3 = #2}
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ror}
%    \begin{macrocode}
\newcommand{\ror}[3]{
  \ifthenelse{#1 = 0}
             {#3 = #2}
             {#3 = #1}
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rmax}
%    \begin{macrocode}
\newcommand{\rmax}[3]{
  \ifthenelse{#1 > #2}
             {#3 = #1}
             {#3 = #2}
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\rmin}
%    \begin{macrocode}
\newcommand{\rmin}[3]{
  \ifthenelse{#1 < #2}
             {#3 = #1}
             {#3 = #2}
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Type-specific Macros}
%
%
% \begin{macro}{\countinc}
%    \begin{macrocode}
\newcommand{\countinc}[1]{
  \radd{#1}{1}{#1}
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\countdec}
%    \begin{macrocode}
\newcommand{\countdec}[1]{
  \rsub{#1}{1}{#1}
}
%    \end{macrocode}
% \end{macro}
%
%
%
%    \begin{macrocode}
\EndPackage
%</package>
%    \end{macrocode}
%
%
% \CheckSum{44}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \endinput
% Local Variables:
% mode: doctex
% TeX-master: t
% End:
